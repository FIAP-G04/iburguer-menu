# name: SonarCloud
# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     types: [opened, synchronize, reopened]
# jobs:
#   build:
#     name: Build and analyze
#     runs-on: windows-latest
#     steps:
#       - name: Set up JDK 17
#         uses: actions/setup-java@v3
#         with:
#           java-version: 17
#           distribution: 'zulu'
#       - uses: actions/checkout@v3
#         with:
#           fetch-depth: 0
#       - name: Cache SonarCloud packages
#         uses: actions/cache@v3
#         with:
#           path: ~\sonar\cache
#           key: ${{ runner.os }}-sonar
#           restore-keys: ${{ runner.os }}-sonar
#       - name: Cache SonarCloud scanner
#         id: cache-sonar-scanner
#         uses: actions/cache@v3
#         with:
#           path: .\.sonar\scanner
#           key: ${{ runner.os }}-sonar-scanner
#           restore-keys: ${{ runner.os }}-sonar-scanner
#       - name: Install SonarCloud scanner
#         if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
#         shell: powershell
#         run: |
#           New-Item -Path .\.sonar\scanner -ItemType Directory
#           dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner     
#       - name: Build and analyze 1
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#         shell: powershell
#         run: |
#           .\.sonar\scanner\dotnet-sonarscanner begin /k:"FIAP-G04_iburguer-menu" /o:"fiap-g04" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
#           dotnet build --configuration Release
#           dotnet test --no-build --configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
#           .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

name: SonarCloud Analysis
on:
  push:
    branches:
      - main
  pull_request:
        types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build and Analyze
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_PROJECT_KEY: your-project-key
      SONAR_ORGANIZATION: your-organization-key

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x' # Adjust to your target .NET version

      - name: Install dependencies
        run: dotnet restore

      - name: Build the project
        run: dotnet build --no-restore

      - name: Run tests with coverage
        run: dotnet test --no-build --collect:"XPlat Code Coverage"

      - name: Report coverage to SonarCloud
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool
          reportgenerator -reports:**/coverage.cobertura.xml -targetdir:coveragereport -reporttypes:SonarQube
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"FIAP-G04_iburguer-menu" /o:"fiap-g04" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.cs.opencover.reportsPaths="coveragereport/SonarQube.xml"
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Publish test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: '**/TestResults/*'
