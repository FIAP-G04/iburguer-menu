name: Build
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build
    runs-on: windows-latest
    steps:
      - uses: actions/setup-java@v3
        name: Set up JDK 11
        with:
          distribution: 'zulu'
          java-version: '11'
  
      - uses: actions/setup-dotnet@v3
        name: Setup dotnet
        with:
          dotnet-version: '8.x'
  
      - uses: actions/checkout@v3
        if: inputs.checkout == 'true'
        with:
          fetch-depth: 0  
  
      - uses: actions/cache@v3
        name: Cache SonarCloud packages
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
  
      - uses: actions/cache@v3
        name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
  
      - shell: pwsh
        name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner  
    
      - shell: pwsh
        name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet tool update --global dotnet-coverage
  
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"FIAP-G04_iburguer-menu" /o:"fiap-g04" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
              
          dotnet build
          dotnet-coverage collect 'dotnet test' -f xml  -o 'coverage.xml'
  
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
